Types of Inheritance with Examples:
Single Inheritance:
One child class inherits from one parent class.

cpp
Copy code
class Parent {
public:
    void display() {
        cout << "This is the Parent class." << endl;
    }
};

class Child : public Parent { };
Multilevel Inheritance:
A child class inherits from a parent, and another class inherits from that child class.

cpp
Copy code
class GrandParent {
public:
    void show() {
        cout << "This is the GrandParent class." << endl;
    }
};

class Parent : public GrandParent { };
class Child : public Parent { };
Hierarchical Inheritance:
Multiple child classes inherit from one parent class.

cpp
Copy code
class Parent {
public:
    void display() {
        cout << "This is the Parent class." << endl;
    }
};

class Child1 : public Parent { };
class Child2 : public Parent { };
Multiple Inheritance:
A child class inherits from multiple parent classes.

cpp
Copy code
class Parent1 {
public:
    void display1() {
        cout << "This is Parent1 class." << endl;
    }
};

class Parent2 {
public:
    void display2() {
        cout << "This is Parent2 class." << endl;
    }
};

class Child : public Parent1, public Parent2 { };
Hybrid Inheritance:
A combination of two or more types of inheritance.

cpp
Copy code
class GrandParent {
public:
    void show() {
        cout << "This is the GrandParent class." << endl;
    }
};

class Parent1 : public GrandParent { };
class Parent2 : public GrandParent { };

class Child : public Parent1, public Parent2 { }; // Resolves ambiguity

************************
Encapsulation

class BankAccount {
private:
    double balance; // Private data

public:
    // Method to get balance
    double getBalance() {
        return balance;
    }

    // Method to deposit money
    void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
        }
    }
};

int main() {
    BankAccount account; 
    account.deposit(500); // Deposit money
    cout << account.getBalance(); // Get balance safely
}
**********************

Polymorphism
Types of Polymorphism:
Compile-time Polymorphism (Static Polymorphism):

This happens when the method or function is decided at compile time. The most common example is function overloading or operator overloading.
Example:
A function add() can work with two integers or two floats, but it's the same function name:
cpp
Copy code
int add(int a, int b) { return a + b; }
float add(float a, float b) { return a + b; }
Run-time Polymorphism (Dynamic Polymorphism):

This happens when the method or function is decided at runtime. It typically uses inheritance and function overriding.
Example:
A parent class Animal has a method sound(), but each child class (like Dog and Cat) makes a different sound:
cpp
Copy code
class Animal {
public:
    virtual void sound() { cout << "Some sound"; }
};

class Dog : public Animal {
public:
    void sound() { cout << "Bark"; }
};

class Cat : public Animal {
public:
    void sound() { cout << "Meow"; }
};

int main() {
    Animal* animal1 = new Dog();
    Animal* animal2 = new Cat();

    animal1->sound(); // Output: Bark
    animal2->sound(); // Output: Meow
}

*********************************************

Constructor

A constructor is a special method in a class that is automatically called when an object is created. It initializes the object's properties.

Types of Constructors:
Default Constructor:
A constructor that takes no arguments and initializes the object with default values.

cpp
Copy code
class Car {
public:
    Car() { // Default constructor
        cout << "Car created!" << endl;
    }
};
Parameterized Constructor:
A constructor that takes arguments to initialize an object with specific values.

cpp
Copy code
class Car {
public:
    Car(string color) { // Parameterized constructor
        cout << "Car color: " << color << endl;
    }
};
Copy Constructor:
A constructor that creates a new object by copying an existing object.

cpp
Copy code
class Car {
public:
    Car(const Car &obj) { // Copy constructor
        cout << "Car copied!" << endl;
    }
};
In short, constructors help set up new objects with initial values.

********************************************************
destru
class Car {
public:
    // Constructor
    Car() {
        cout << "Car created!" << endl;
    }

    // Destructor
    ~Car() {
        cout << "Car destroyed!" << endl;
    }
};

int main() {
    Car myCar;  // Constructor called
}  // Destructor called when myCar goes out of scope

********************************************************
Aggrigation example
Example:
A Library has many Books. The Library can exist without Books, and Books can exist without the Library.

Simple Example in Code:
cpp
Copy code
class Book {
public:
    string title;
    Book(string t) : title(t) {}
};

class Library {
public:
    Book *book;
    Library(Book *b) : book(b) {}
};

int main() {
    Book b1("C++ Programming");
    Library lib(&b1);  // Library has a Book
}

********************************************************








